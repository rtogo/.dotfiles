#+TITLE: Doom Emacs Config
#+PROPERTY: header-args :tangle yes

* Table of contets :toc:
- [[#about-this-config][About this config]]
- [[#dired][dired]]
- [[#doom-theme][Doom theme]]
- [[#fonts][Fonts]]
- [[#line-settings][Line settings]]
- [[#mu4e][MU4E]]
  - [[#falta-configurar-esse][Falta configurar esse]]
- [[#neotree][Neotree]]
- [[#open-specific-files][Open specific files]]
- [[#shells][Shells]]
- [[#org-mode][Org mode]]
  - [[#getting-started][Getting started]]
  - [[#tasks-and-states][Tasks and States]]
  - [[#adding-new-tasks-quickly-with-org-capture][Adding New Tasks Quickly with Org Capture]]
  - [[#configs-que-ja-tinha-feito-antes-de-ler-o-guia][Configs que ja tinha feito antes de ler o guia]]

* About this config
This is my personal Doom Emacs config.

To use this file you can load in Emacs an tangle with =C-c C-v C-t= which will
create config.el in the same directory as this file. This will extract all elisp
blocks in this document into a file to be used as Emacs config file.

This document also describes my workflow.

Based on:
- [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.doom.d/config.org]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]

* dired
Dired is the file manager within Emacs. Below, I setup keybindings for image
previews (peep-dired). Doom Emacs does not use 'SPC d' for any of its
keybindings, so I've chosen the format of 'SPC d' plus 'key'.

| COMMAND                                   | DESCRIPTION                                     | KEYBINDING |
|-------------------------------------------+-------------------------------------------------+------------|
| dired                                     | /Open dired file manager/                         | SPC d d    |
| dired-jump                                | /Jump to current directory in dired/              | SPC d j    |
| (in dired) peep-dired                     | /Toggle image previews within dired/              | SPC d p    |
| (in dired) dired-view-file                | /View file in dired/                              | SPC d v    |
| (in dired) dired-up-directory             | Go up in the directory tree                     | h          |
| (in dired) dired-find-file                | Go down in the directory tree (or open if file) | l          |
| (in peep-dired-mode) peep-dired-next-file | /Move to next file in peep-dired-mode/            | j          |
| (in peep-dired-mode) peep-dired-prev-file | /Move to previous file in peep-dired-mode/        | k          |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Dired"
      "d d" #'dired
      :leader
      :desc "Dired jump to current"
      "d j" #'dired-jump
      (:after dired
        (:map dired-mode-map
         :leader
         :desc "Peep-dired image previews"
         "d p" #'peep-dired
         :leader
         :desc "Dired view file"
         "d v" #'dired-view-file)))
;; Make 'h' and 'l' go back and forward in dired. Much faster to navigate the directory structure!
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
;; If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+END_SRC

* Doom theme
Set doom theme.

#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

* Fonts
Settings related to fonts within Doom Emacs:
- 'doom-font' -- standard monospace font that is used for most things in Emacs.
- 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
- 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
- 'font-lock-comment-face' -- for comments.
- 'font-lock-keyword-face' -- for keywords with special significance, like ‘for’ and ‘if’ in C.

#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "DejaVu Sans Mono" :size 16)
(setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 16 :style 'Medium)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "DejaVu Sans Mono" :size 24))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

;; Show comments in italic
(custom-set-faces!
  '(font-lock-comment-face :slant italic))
#+end_src

* Line settings
Toggle display-line-numbers-type so I have line numbers relative to the current
line. Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t t' for
toggle-truncate-lines.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(map! :leader
      :desc "Truncate lines"
      "t t" #'toggle-truncate-lines)
#+end_src

* MU4E
Setting up mu4e which is an email client that works within emacs. You must
install mu4e and mbsync through your Linux distribution's package manager.
Setting up smtp for sending mail. Make sure the gnutls command line utils are
installed. Package 'gnutls-bin' in Debian/Ubuntu, and 'gnutls' in Arch.

** TODO Falta configurar esse

* Neotree
Neotree is a file tree viewer. When you open neotree, it jumps to the current
file thanks to neo-smart-open. The neo-window-fixed-size setting makes the
neotree width be adjustable. Doom Emacs had no keybindings set for neotree.
Since Doom Emacs uses 'SPC t' for 'toggle' keybindings, I used 'SPC t n' for
toggle-neotree.

#+begin_src emacs-lisp
(after! neotree
  (setq neo-window-fixed-size nil))
#+end_src

* Open specific files
Keybindings to open files that I work with all the time using the find-file
command non-interactively since we specify exactly what file to open. The format
I use for these bindings is 'SPC -' plus 'key' since Doom Emacs does not use
these keybindings.

| PATH TO FILE     | DESCRIPTION      | KEYBINDING |
|------------------+------------------+------------|
| ~/org/agenda.org | /Edit agenda file/ | SPC - a    |

#+begin_src emacs-lisp
(map! :leader
      :desc "Edit agenda file"
      "a" #'(lambda () (interactive) (find-file "~/org/todo.org")))
#+end_src

* Shells
Settings for the various shells and terminal emulators within Emacs.
- 'shell-file-name' -- sets the shell to be used in M-x shell, M-x term, M-x
  ansi-term and M-x vterm.
- 'eshell-aliases-file' -- sets an aliases file for the eshell.

#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/bin/bash"
      eshell-aliases-file "~/.doom.d/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "htop" "ssh" "zsh")
      vterm-max-scrollback 5000)
#+end_src

* Org mode
** Getting started

*** Organizing My Life into Org Files
Tasks are separated into logical groupings or projects. Use separate org files
for large task groupings and subdirectories for collections of files for
multiple projects that belong together.

Here are the sample files that I use
| Filename                  | Description                                |
|---------------------------+--------------------------------------------|
| todo.org                  | Personal tasks and things to keep track of |
| inbox.org                 | Capture inbox                              |
| aurearobotics/Foo/bar.org | Taks for project Bar of client Foo         |

Org-mode is great for dealing with multiple clients and client projects. An org
file becomes the collection of notes, tasks, reference material, etc. for a
single client-project.

Separating the tasks for each client-project into separate org files helps keep
things logically grouped and since projects come and go, this allows entire org
files to be added or dropped from my agenda to keep only what is important
visible in agenda views.

*** Agenda
This is the =org-agenda-files= setup.

#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files '("~/org/todo.org"
                           "~/org/aurearobotics"
                           "~/org/aurearobotics/firjan"
                           "~/org/aurearobotics/brunel")))
#+end_src

=org-mode= manages the =org-agenda-files= variable automatically using =C-c [= and =C-c
]= to add and remove files respectively. However, this replaces my directory list
with a list of explicit filenames instead and is not what I want. If this occurs
then adding a new org file to any of the above directories will not contribute
to my agenda and I will probably miss something important.

I have disabled the =C-c [= and =C-c ]= keys in =org-mode-hook= to prevent messing up
my list of directories in the =org-agenda-files= variable. I just add and remove
directories manually above. Changing the list of directories in =org-agenda-files=
happens very rarely since new files in existing directories are automatically
picked up.

#+begin_src emacs-lisp
(after! org
    (define-key org-mode-map (kbd "C-c [") nil)
    (define-key org-mode-map (kbd "C-c ]") nil))
#+end_src

*** Org File Structure
Most of my org files are set up with level 1 headings as main categories only.
Tasks and projects normally start as level 2.

Here are some examples of my level 1 headings in

=todo.org=:
- Special Dates
  + Birthdays
  + Holidays
- Finances
- Health
- House Maintenance
- Notes
- Tasks

=aurearobotics.org=
- System Maintenance
- Payroll
- Accounting
- Finances
- Hardware Maintenance
- Tasks
- Research and Development
- Notes

*** Key bindings
The main reason I have special key bindings (like =F11=, and =F12=) is so that the
keys work in any mode. If I'm in the Gnus summary buffer then =C-u C-c C-x C-i=
doesn't work, but the =C-F11= key combination does and this saves me time since I
don't have to visit an org-mode buffer first just to clock in a recent task.

** Tasks and States

I use the same set of TODO keywords for all of my org files. Org-mode lets you
define TODO keywords per file but I find it's easier to have a standard set of
TODO keywords globally so I can use the same setup in any org file I'm working
with.

*** Todo keywords
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "|" "DONE(d)" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
        ;; Antes de mudar as cores, dar um describe nesta variavel e só entao adaptar a partir dela
        ;; org-todo-keyword-faces
        ;; '(("TODO" :foreground "red" :weight bold)
        ;;    ("NEXT" :foreground "blue" :weight bold)
        ;;    ("DONE" :foreground "forest green" :weight bold)
        ;;    ("WAITING" :foreground "orange" :weight bold)
        ;;    ("HOLD" :foreground "magenta" :weight bold)
        ;;    ("CANCELLED" :foreground "forest green" :weight bold)
        ;;    ("MEETING" :foreground "forest green" :weight bold)
        ;;    ("PHONE" :foreground "forest green" :weight bold))))
#+end_src

*** Project Task States
I don't like to bother with manually stating 'this is a project' and 'that is
not a project'. For me a project definition is really simple. If a task has
subtasks with a todo keyword then it's a project. That's it.

One subtask of a project needs to be marked NEXT so the project is not on the
stuck projects list.

*** Phone Calls
Telephone calls are special. They are created in a done state by a capture task.

The time of the call is recorded for as long as the capture task is active. If I
need to look up other details and want to close the capture task early I can
just =C-c C-c= to close the capture task (stopping the clock) and then =f9 SPC= to
resume the clock in the phone call while I do other things.

*** Meetings
Meetings are special. They are created in a done state by a capture task. I use
the MEETING capture template when someone interrupts what I'm doing with a
question or discussion. This is handled similarly to phone calls where I clock
the amount of time spent with whomever it is and record some notes of what was
discussed, either during or after the meeting.

The time of the meeting is recorded for as long as the capture task is active.
If I need to look up other details and want to close the capture task early I
can just =C-c C-c= to close the capture task (stopping the clock) and then =f9 SPC=
to resume the clock in the meeting task while I do other things.

*** Fast Todo Selection
Fast todo selection allows changing from any task todo state to any other state
directly by selecting the appropriate key from the fast todo selection key menu.
This is a great feature!

#+begin_src emacs-lisp
(setq org-use-fast-todo-selection t)
#+end_src

Changing a task state is done with =SPC m t KEY= where =KEY= is the appropriate fast
todo state selection key as defined in =org-todo-keywords=.

The setting

#+begin_src emacs-lisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

allows changing todo states with =S-left= and =S-right= skipping all of the normal
processing when entering or leaving a todo state. This cycles through the todo
states but skips setting timestamps and entering notes which is very convenient
when all you want to do is fix up the status of an entry.

** Adding New Tasks Quickly with Org Capture
I create new tasks quickly using these templates. They are store in =inbox.org=
and them I refile them to the correct location. Normally this file is empty.

** Configs que ja tinha feito antes de ler o guia
*** Capture Templates
#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        '(("t" "Personal todo" entry (file+headline +org-capture-todo-file "Inbox") "* TODO %?\n%i\n%a" :prepend t)
          ("n" "Personal notes" entry (file+headline +org-capture-notes-file "Inbox") "* %u %?\n%i\n%a" :prepend t)
          ("j" "Journal" entry (file+olp+datetree +org-capture-journal-file) "* %U %?\n%i\n%a" :prepend t)

          ("p" "Templates for projects")
          ("pt" "Project-local todo" entry (file+headline +org-capture-project-todo-file "Inbox") "* TODO %?\n%i\n%a" :prepend t)
          ("pn" "Project-local notes" entry (file+headline +org-capture-project-notes-file "Inbox") "* %U %?\n%i\n%a" :prepend t)
          ("pc" "Project-local changelog" entry (file+headline +org-capture-project-changelog-file "Unreleased") "* %U %?\n%i\n%a" :prepend t)

          ("o" "Centralized templates for projects")
          ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
          ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
          ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t))))
#+end_src

*** Outras configs do org
#+begin_src emacs-lisp
(after! org
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-directory "~/org/"
        +org-capture-todo-file "~/org/todo.org"
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-log-done 'time
        org-hide-emphasis-markers t))
#+end_src

