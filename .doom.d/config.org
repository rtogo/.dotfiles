#+TITLE: Doom Emacs Config
#+PROPERTY: header-args :tangle config.el

* Table of contets :toc:
- [[#about-this-config][About this config]]
- [[#dired][dired]]
- [[#doom-theme][Doom theme]]
- [[#fonts][Fonts]]
- [[#line-settings][Line settings]]
- [[#mu4e][MU4E]]
  - [[#falta-configurar-esse][Falta configurar esse]]
- [[#neotree][Neotree]]
- [[#open-specific-files][Open specific files]]
- [[#org-mode][Org mode]]
  - [[#capture-templates][Capture Templates]]
- [[#shells][Shells]]

* About this config
This is my personal Doom Emacs config.
Based on [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.doom.d/config.org]]

* dired
Dired is the file manager within Emacs. Below, I setup keybindings for image
previews (peep-dired). Doom Emacs does not use 'SPC d' for any of its
keybindings, so I've chosen the format of 'SPC d' plus 'key'.

| COMMAND                                   | DESCRIPTION                                     | KEYBINDING |
|-------------------------------------------+-------------------------------------------------+------------|
| dired                                     | /Open dired file manager/                         | SPC d d    |
| dired-jump                                | /Jump to current directory in dired/              | SPC d j    |
| (in dired) peep-dired                     | /Toggle image previews within dired/              | SPC d p    |
| (in dired) dired-view-file                | /View file in dired/                              | SPC d v    |
| (in dired) dired-up-directory             | Go up in the directory tree                     | h          |
| (in dired) dired-find-file                | Go down in the directory tree (or open if file) | l          |
| (in peep-dired-mode) peep-dired-next-file | /Move to next file in peep-dired-mode/            | j          |
| (in peep-dired-mode) peep-dired-prev-file | /Move to previous file in peep-dired-mode/        | k          |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Dired"
      "d d" #'dired
      :leader
      :desc "Dired jump to current"
      "d j" #'dired-jump
      (:after dired
        (:map dired-mode-map
         :leader
         :desc "Peep-dired image previews"
         "d p" #'peep-dired
         :leader
         :desc "Dired view file"
         "d v" #'dired-view-file)))
;; Make 'h' and 'l' go back and forward in dired. Much faster to navigate the directory structure!
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
;; If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+END_SRC

* Doom theme
Set doom theme.

#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

* Fonts
Settings related to fonts within Doom Emacs:
- 'doom-font' -- standard monospace font that is used for most things in Emacs.
- 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
- 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
- 'font-lock-comment-face' -- for comments.
- 'font-lock-keyword-face' -- for keywords with special significance, like ‘for’ and ‘if’ in C.

#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "DejaVu Sans Mono" :size 16)
(setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 16 :style 'Medium)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "DejaVu Sans Mono" :size 24))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

;; Show comments in italic
(custom-set-faces!
  '(font-lock-comment-face :slant italic))
#+end_src

* Line settings
Toggle display-line-numbers-type so I have line numbers relative to the current
line. Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t t' for
toggle-truncate-lines.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(map! :leader
      :desc "Truncate lines"
      "t t" #'toggle-truncate-lines)
#+end_src

* MU4E
Setting up mu4e which is an email client that works within emacs. You must
install mu4e and mbsync through your Linux distribution's package manager.
Setting up smtp for sending mail. Make sure the gnutls command line utils are
installed. Package 'gnutls-bin' in Debian/Ubuntu, and 'gnutls' in Arch.

** TODO Falta configurar esse

* Neotree
Neotree is a file tree viewer. When you open neotree, it jumps to the current
file thanks to neo-smart-open. The neo-window-fixed-size setting makes the
neotree width be adjustable. Doom Emacs had no keybindings set for neotree.
Since Doom Emacs uses 'SPC t' for 'toggle' keybindings, I used 'SPC t n' for
toggle-neotree.

#+begin_src emacs-lisp
(after! neotree
  (setq neo-window-fixed-size nil))
#+end_src

* Open specific files
Keybindings to open files that I work with all the time using the find-file
command non-interactively since we specify exactly what file to open. The format
I use for these bindings is 'SPC -' plus 'key' since Doom Emacs does not use
these keybindings.

| PATH TO FILE     | DESCRIPTION      | KEYBINDING |
|------------------+------------------+------------|
| ~/org/agenda.org | /Edit agenda file/ | SPC - a    |

#+begin_src emacs-lisp
(map! :leader
      :desc "Edit agenda file"
      "a" #'(lambda () (interactive) (find-file "~/org/todo.org")))
#+end_src

* Org mode
#+begin_src emacs-lisp
(after! org
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-directory "~/org/"
        +org-capture-todo-file "~/org/todo.org"
        org-agenda-files '("~/org/todo.org", "~/org/calendar.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-log-done 'time
        org-hide-emphasis-markers t
        org-todo-keywords
          '((sequence
             "TODO(t)"          ; A task that is ready to be tackled
             "PROJ(p)"          ; Project with multiple task items
             "NEXT(n)"          ; Task is next to be worked on
             "STRT(s)"          ; Task is in progress
             "WAIT(w)"          ; Task is blocked or waiting for something/someone
             "|"                ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)")))       ; Task has been completed
)
#+end_src

** Capture Templates
#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        '(("t" "Personal todo" entry (file+headline +org-capture-todo-file "Inbox") "* TODO %?\n%i\n%a" :prepend t)
          ("n" "Personal notes" entry (file+headline +org-capture-notes-file "Inbox") "* %u %?\n%i\n%a" :prepend t)
          ("j" "Journal" entry (file+olp+datetree +org-capture-journal-file) "* %U %?\n%i\n%a" :prepend t)

          ("p" "Templates for projects")
          ("pt" "Project-local todo" entry (file+headline +org-capture-project-todo-file "Inbox") "* TODO %?\n%i\n%a" :prepend t)
          ("pn" "Project-local notes" entry (file+headline +org-capture-project-notes-file "Inbox") "* %U %?\n%i\n%a" :prepend t)
          ("pc" "Project-local changelog" entry (file+headline +org-capture-project-changelog-file "Unreleased") "* %U %?\n%i\n%a" :prepend t)

          ("o" "Centralized templates for projects")
          ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
          ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
          ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t))))
#+end_src

* Shells
Settings for the various shells and terminal emulators within Emacs.
- 'shell-file-name' -- sets the shell to be used in M-x shell, M-x term, M-x
  ansi-term and M-x vterm.
- 'eshell-aliases-file' -- sets an aliases file for the eshell.

#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/bin/bash"
      eshell-aliases-file "~/.doom.d/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "htop" "ssh" "zsh")
      vterm-max-scrollback 5000)
#+end_src
